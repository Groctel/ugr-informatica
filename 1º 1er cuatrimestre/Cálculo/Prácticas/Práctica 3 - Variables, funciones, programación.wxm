/* [wxMaxima batch file version 1] [ DO NOT EDIT BY HAND! ]*/
/* [ Created with wxMaxima version 20.07.0 ] */
/* [wxMaxima: title   start ]
PRÁCTICA 3 - VARIABLES, FUNCIONE, PROGRAMACIÓN
   [wxMaxima: title   end   ] */


/* [wxMaxima: comment start ]
ATANASIO RUBIO GIL
   [wxMaxima: comment end   ] */


/* [wxMaxima: section start ]
Define las funciones sind y cosd que calculen seno y coseno en grados.
   [wxMaxima: section end   ] */


/* [wxMaxima: input   start ] */
p
/* [wxMaxima: input   end   ] */


/* [wxMaxima: section start ]
Define una función a trozos que valga x^2 en R- y cos(x)atan(x) en [0,+inf]
   [wxMaxima: section end   ] */


/* [wxMaxima: input   start ] */
f(x):=
    if (x<0)
    then
        x^2
    else
        cos(x)*atan(x)
;
/* [wxMaxima: input   end   ] */


/* [wxMaxima: section start ]
Define una función a trozos que valga sin(x) entre 0 y π; cos(x) en [π,2π] y x+1 en [2π,10].1
   [wxMaxima: section end   ] */


/* [wxMaxima: input   start ] */
f(x):=
    if (0<x and x<%pi)
    then
        sin(x)
    else if (%pi<=x and x<=2*%pi)
    then
        cos(x)
    else if (2*%pi<x and x<=10)
    then
        x+1
;
/* [wxMaxima: input   end   ] */


/* [wxMaxima: section start ]
pr
   [wxMaxima: section end   ] */


/* [wxMaxima: input   start ] */
or
/* [wxMaxima: input   end   ] */


/* [wxMaxima: section start ]
or
   [wxMaxima: section end   ] */


/* [wxMaxima: input   start ] */
sum_mult3(maximo):=block
(
    [suma:0],
    
    for i:0 thru maximo-1
    do
        if (divide(i,3)[2] = 0)
        then
            suma:suma+3
    ,
    suma
);
/* [wxMaxima: input   end   ] */


/* [wxMaxima: input   start ] */

sum_mult3(1000);
/* [wxMaxima: input   end   ] */


/* [wxMaxima: section start ]
El grosor de una hoja de papel A4 de 80 gr estándar es de 0.11 mm. ¿Cuál es su grosor después de doblarlo 5 veces? ¿Cuántas veces hay que doblarla para que su altura sea 1cm? ¿Y para que la altura sea 1.80 m? ¿Y el radio de la tierra?
   [wxMaxima: section end   ] */


/* [wxMaxima: input   start ] */
doblar_hoja(dobleces):=block
(
    [grosor:0.11],
    
    for i:0 thru dobleces-1
    do
        grosor:grosor*2
    ,
    grosor
);
/* [wxMaxima: input   end   ] */


/* [wxMaxima: input   start ] */
doblar_hoja_hasta(grosor_maximo):=block
(
    [   grosor:0.11,
        iteraciones:0
    ],
    
    while (grosor < grosor_maximo) do
    (
        grosor:grosor*2,
        iteraciones:iteraciones+1
    ),
    iteraciones
);
/* [wxMaxima: input   end   ] */


/* [wxMaxima: input   start ] */
doblar_hoja(5);
/* [wxMaxima: input   end   ] */


/* [wxMaxima: input   start ] */
doblar_hoja_hasta(1*1000);
/* [wxMaxima: input   end   ] */


/* [wxMaxima: input   start ] */
doblar_hoja_hasta(6357*1000*1000);
/* [wxMaxima: input   end   ] */


/* [wxMaxima: section start ]
pro
   [wxMaxima: section end   ] */


/* [wxMaxima: input   start ] */
sucesion_chula(iteraciones):=block
(
    [producto:1],

    for i:0 thru iteraciones-1
    do
    (
        if (i > 0)
        then
            producto:producto*1+10^-i
    ),
    producto
);
/* [wxMaxima: input   end   ] */


/* [wxMaxima: input   start ] */
sucesion_chula(15),numer;
/* [wxMaxima: input   end   ] */


/* [wxMaxima: section start ]
producto
   [wxMaxima: section end   ] */


/* [wxMaxima: input   start ] */
sucesion_molona(iteraciones):=block
(
    [producto:1],
    
    for i:1 thru iteraciones
    do
    (
        producto:producto*(1+1/i)^i
    ),
    producto
);
/* [wxMaxima: input   end   ] */


/* [wxMaxima: input   start ] */
sucesion_molona(20);
/* [wxMaxima: input   end   ] */


/* [wxMaxima: section start ]
Calcula la suma de los números naturales entre 10 y 1000 que no son divisibles por 7.
   [wxMaxima: section end   ] */


/* [wxMaxima: input   start ] */
sum_notmult7(minimo, maximo):=block
(
    [suma:0],
    
    for i:minimo+1 thru maximo-1
    do
        if (not divide(i,7)[2] = 0)
        then
            suma:suma+i
    ,
    suma
);
/* [wxMaxima: input   end   ] */


/* [wxMaxima: input   start ] */
sum_notmult7(10,1000);
/* [wxMaxima: input   end   ] */


/* [wxMaxima: section start ]
Calcula la media aritmética, la media geométrica y la media armónica de los primeros 100 números naturales.
   [wxMaxima: section end   ] */


/* [wxMaxima: input   start ] */
arth_avg(maximo):=block
(
    [suma:0],
    
    for i:1 thru maximo
    do
        suma:suma+i
    ,
    suma/maximo
);
/* [wxMaxima: input   end   ] */


/* [wxMaxima: input   start ] */
geom_avg(maximo):=block
(
    [producto:1],
    
    for i:1 thru maximo
    do
        producto:producto*i
    ,
    producto^(maximo^-1)
);
/* [wxMaxima: input   end   ] */


/* [wxMaxima: input   start ] */
armc_avg(maximo):=block
(
    [suma:0],
    
    for i:1 thru maximo
    do
        suma:suma+i^-1
    ,
    maximo*(suma^-1)
);
/* [wxMaxima: input   end   ] */


/* [wxMaxima: input   start ] */
arth_avg(100);
/* [wxMaxima: input   end   ] */


/* [wxMaxima: input   start ] */
geom_avg(100);
/* [wxMaxima: input   end   ] */


/* [wxMaxima: input   start ] */
armc_avg(100);
/* [wxMaxima: input   end   ] */


/* [wxMaxima: section start ]
Calcula el primer natural que cumple que (1 + 1/2 + ... + 1/n) > 7.1
   [wxMaxima: section end   ] */


/* [wxMaxima: input   start ] */
sum_inv(minimo):=block
(
    [   suma:0,
        indice:0
    ],
    
    while suma < minimo do
    (
        indice:indice+1,
        suma:suma+indice^-1
    ),
    indice
);
/* [wxMaxima: input   end   ] */


/* [wxMaxima: input   start ] */
sum_inv(7.1);
/* [wxMaxima: input   end   ] */


/* [wxMaxima: section start ]
Encuentra los puntos con coordenadas enteras dentro del círculo centrado en el origen y radio 5.
   [wxMaxima: section end   ] */


/* [wxMaxima: input   start ] */
int_coords(radio):=block
(
    for i:0 thru radio do
    (
        for j:0 thru radio
        do
            /* Aquí va un if pero no sé cómo se hace porque estoy chiquito */ 
    )
);
/* [wxMaxima: input   end   ] */



/* Old versions of Maxima abort on loading files that end in a comment. */
"Created with wxMaxima 20.07.0"$
