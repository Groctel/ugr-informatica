#!/usr/bin/env python
#
# Autogenerated by Thrift Compiler (0.14.1)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py
#

import sys
import pprint
if sys.version_info[0] > 2:
    from urllib.parse import urlparse
else:
    from urlparse import urlparse
from thrift.transport import TTransport, TSocket, TSSLSocket, THttpClient
from thrift.protocol.TBinaryProtocol import TBinaryProtocol

from calculadora import Calculadora
from calculadora.ttypes import *

if len(sys.argv) <= 1 or sys.argv[1] == '--help':
    print('')
    print('Usage: ' + sys.argv[0] + ' [-h host[:port]] [-u url] [-f[ramed]] [-s[sl]] [-novalidate] [-ca_certs certs] [-keyfile keyfile] [-certfile certfile] function [arg1 [arg2...]]')
    print('')
    print('Functions:')
    print('  void ping()')
    print('  i32 suma_escalar(i32 operando1, i32 operando2)')
    print('  i32 resta_escalar(i32 operando1, i32 operando2)')
    print('  i32 producto_escalar(i32 operando1, i32 operando2)')
    print('  i32 division_escalar(i32 operando1, i32 operando2)')
    print('   suma_vectorial( operando1,  operando2)')
    print('   resta_vectorial( operando1,  operando2)')
    print('   producto_vectorial( operando1,  operando2)')
    print('   suma_matricial( operando1,  operando2)')
    print('   resta_matricial( operando1,  operando2)')
    print('   producto_matricial( operando1,  operando2)')
    print('')
    sys.exit(0)

pp = pprint.PrettyPrinter(indent=2)
host = 'localhost'
port = 9090
uri = ''
framed = False
ssl = False
validate = True
ca_certs = None
keyfile = None
certfile = None
http = False
argi = 1

if sys.argv[argi] == '-h':
    parts = sys.argv[argi + 1].split(':')
    host = parts[0]
    if len(parts) > 1:
        port = int(parts[1])
    argi += 2

if sys.argv[argi] == '-u':
    url = urlparse(sys.argv[argi + 1])
    parts = url[1].split(':')
    host = parts[0]
    if len(parts) > 1:
        port = int(parts[1])
    else:
        port = 80
    uri = url[2]
    if url[4]:
        uri += '?%s' % url[4]
    http = True
    argi += 2

if sys.argv[argi] == '-f' or sys.argv[argi] == '-framed':
    framed = True
    argi += 1

if sys.argv[argi] == '-s' or sys.argv[argi] == '-ssl':
    ssl = True
    argi += 1

if sys.argv[argi] == '-novalidate':
    validate = False
    argi += 1

if sys.argv[argi] == '-ca_certs':
    ca_certs = sys.argv[argi+1]
    argi += 2

if sys.argv[argi] == '-keyfile':
    keyfile = sys.argv[argi+1]
    argi += 2

if sys.argv[argi] == '-certfile':
    certfile = sys.argv[argi+1]
    argi += 2

cmd = sys.argv[argi]
args = sys.argv[argi + 1:]

if http:
    transport = THttpClient.THttpClient(host, port, uri)
else:
    if ssl:
        socket = TSSLSocket.TSSLSocket(host, port, validate=validate, ca_certs=ca_certs, keyfile=keyfile, certfile=certfile)
    else:
        socket = TSocket.TSocket(host, port)
    if framed:
        transport = TTransport.TFramedTransport(socket)
    else:
        transport = TTransport.TBufferedTransport(socket)
protocol = TBinaryProtocol(transport)
client = Calculadora.Client(protocol)
transport.open()

if cmd == 'ping':
    if len(args) != 0:
        print('ping requires 0 args')
        sys.exit(1)
    pp.pprint(client.ping())

elif cmd == 'suma_escalar':
    if len(args) != 2:
        print('suma_escalar requires 2 args')
        sys.exit(1)
    pp.pprint(client.suma_escalar(eval(args[0]), eval(args[1]),))

elif cmd == 'resta_escalar':
    if len(args) != 2:
        print('resta_escalar requires 2 args')
        sys.exit(1)
    pp.pprint(client.resta_escalar(eval(args[0]), eval(args[1]),))

elif cmd == 'producto_escalar':
    if len(args) != 2:
        print('producto_escalar requires 2 args')
        sys.exit(1)
    pp.pprint(client.producto_escalar(eval(args[0]), eval(args[1]),))

elif cmd == 'division_escalar':
    if len(args) != 2:
        print('division_escalar requires 2 args')
        sys.exit(1)
    pp.pprint(client.division_escalar(eval(args[0]), eval(args[1]),))

elif cmd == 'suma_vectorial':
    if len(args) != 2:
        print('suma_vectorial requires 2 args')
        sys.exit(1)
    pp.pprint(client.suma_vectorial(eval(args[0]), eval(args[1]),))

elif cmd == 'resta_vectorial':
    if len(args) != 2:
        print('resta_vectorial requires 2 args')
        sys.exit(1)
    pp.pprint(client.resta_vectorial(eval(args[0]), eval(args[1]),))

elif cmd == 'producto_vectorial':
    if len(args) != 2:
        print('producto_vectorial requires 2 args')
        sys.exit(1)
    pp.pprint(client.producto_vectorial(eval(args[0]), eval(args[1]),))

elif cmd == 'suma_matricial':
    if len(args) != 2:
        print('suma_matricial requires 2 args')
        sys.exit(1)
    pp.pprint(client.suma_matricial(eval(args[0]), eval(args[1]),))

elif cmd == 'resta_matricial':
    if len(args) != 2:
        print('resta_matricial requires 2 args')
        sys.exit(1)
    pp.pprint(client.resta_matricial(eval(args[0]), eval(args[1]),))

elif cmd == 'producto_matricial':
    if len(args) != 2:
        print('producto_matricial requires 2 args')
        sys.exit(1)
    pp.pprint(client.producto_matricial(eval(args[0]), eval(args[1]),))

else:
    print('Unrecognized method %s' % cmd)
    sys.exit(1)

transport.close()
