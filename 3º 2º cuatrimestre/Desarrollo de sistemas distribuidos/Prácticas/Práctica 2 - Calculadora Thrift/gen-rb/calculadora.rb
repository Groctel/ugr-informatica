#
# Autogenerated by Thrift Compiler (0.14.1)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#

require 'thrift'
require_relative './calculadora_types'

module Calculadora
  class Client
    include ::Thrift::Client

    def ping()
      send_ping()
      recv_ping()
    end

    def send_ping()
      send_message('ping', Ping_args)
    end

    def recv_ping()
      result = receive_message(Ping_result)
      return
    end

    def suma_escalar(operando1, operando2)
      send_suma_escalar(operando1, operando2)
      return recv_suma_escalar()
    end

    def send_suma_escalar(operando1, operando2)
      send_message('suma_escalar', Suma_escalar_args, :operando1 => operando1, :operando2 => operando2)
    end

    def recv_suma_escalar()
      result = receive_message(Suma_escalar_result)
      return result.success unless result.success.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'suma_escalar failed: unknown result')
    end

    def resta_escalar(operando1, operando2)
      send_resta_escalar(operando1, operando2)
      return recv_resta_escalar()
    end

    def send_resta_escalar(operando1, operando2)
      send_message('resta_escalar', Resta_escalar_args, :operando1 => operando1, :operando2 => operando2)
    end

    def recv_resta_escalar()
      result = receive_message(Resta_escalar_result)
      return result.success unless result.success.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'resta_escalar failed: unknown result')
    end

    def producto_escalar(operando1, operando2)
      send_producto_escalar(operando1, operando2)
      return recv_producto_escalar()
    end

    def send_producto_escalar(operando1, operando2)
      send_message('producto_escalar', Producto_escalar_args, :operando1 => operando1, :operando2 => operando2)
    end

    def recv_producto_escalar()
      result = receive_message(Producto_escalar_result)
      return result.success unless result.success.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'producto_escalar failed: unknown result')
    end

    def division_escalar(operando1, operando2)
      send_division_escalar(operando1, operando2)
      return recv_division_escalar()
    end

    def send_division_escalar(operando1, operando2)
      send_message('division_escalar', Division_escalar_args, :operando1 => operando1, :operando2 => operando2)
    end

    def recv_division_escalar()
      result = receive_message(Division_escalar_result)
      return result.success unless result.success.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'division_escalar failed: unknown result')
    end

    def suma_vectorial(operando1, operando2)
      send_suma_vectorial(operando1, operando2)
      return recv_suma_vectorial()
    end

    def send_suma_vectorial(operando1, operando2)
      send_message('suma_vectorial', Suma_vectorial_args, :operando1 => operando1, :operando2 => operando2)
    end

    def recv_suma_vectorial()
      result = receive_message(Suma_vectorial_result)
      return result.success unless result.success.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'suma_vectorial failed: unknown result')
    end

    def resta_vectorial(operando1, operando2)
      send_resta_vectorial(operando1, operando2)
      return recv_resta_vectorial()
    end

    def send_resta_vectorial(operando1, operando2)
      send_message('resta_vectorial', Resta_vectorial_args, :operando1 => operando1, :operando2 => operando2)
    end

    def recv_resta_vectorial()
      result = receive_message(Resta_vectorial_result)
      return result.success unless result.success.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'resta_vectorial failed: unknown result')
    end

    def producto_vectorial(operando1, operando2)
      send_producto_vectorial(operando1, operando2)
      return recv_producto_vectorial()
    end

    def send_producto_vectorial(operando1, operando2)
      send_message('producto_vectorial', Producto_vectorial_args, :operando1 => operando1, :operando2 => operando2)
    end

    def recv_producto_vectorial()
      result = receive_message(Producto_vectorial_result)
      return result.success unless result.success.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'producto_vectorial failed: unknown result')
    end

    def suma_matricial(operando1, operando2)
      send_suma_matricial(operando1, operando2)
      return recv_suma_matricial()
    end

    def send_suma_matricial(operando1, operando2)
      send_message('suma_matricial', Suma_matricial_args, :operando1 => operando1, :operando2 => operando2)
    end

    def recv_suma_matricial()
      result = receive_message(Suma_matricial_result)
      return result.success unless result.success.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'suma_matricial failed: unknown result')
    end

    def resta_matricial(operando1, operando2)
      send_resta_matricial(operando1, operando2)
      return recv_resta_matricial()
    end

    def send_resta_matricial(operando1, operando2)
      send_message('resta_matricial', Resta_matricial_args, :operando1 => operando1, :operando2 => operando2)
    end

    def recv_resta_matricial()
      result = receive_message(Resta_matricial_result)
      return result.success unless result.success.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'resta_matricial failed: unknown result')
    end

    def producto_matricial(operando1, operando2)
      send_producto_matricial(operando1, operando2)
      return recv_producto_matricial()
    end

    def send_producto_matricial(operando1, operando2)
      send_message('producto_matricial', Producto_matricial_args, :operando1 => operando1, :operando2 => operando2)
    end

    def recv_producto_matricial()
      result = receive_message(Producto_matricial_result)
      return result.success unless result.success.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'producto_matricial failed: unknown result')
    end

  end

  class Processor
    include ::Thrift::Processor

    def process_ping(seqid, iprot, oprot)
      args = read_args(iprot, Ping_args)
      result = Ping_result.new()
      @handler.ping()
      write_result(result, oprot, 'ping', seqid)
    end

    def process_suma_escalar(seqid, iprot, oprot)
      args = read_args(iprot, Suma_escalar_args)
      result = Suma_escalar_result.new()
      result.success = @handler.suma_escalar(args.operando1, args.operando2)
      write_result(result, oprot, 'suma_escalar', seqid)
    end

    def process_resta_escalar(seqid, iprot, oprot)
      args = read_args(iprot, Resta_escalar_args)
      result = Resta_escalar_result.new()
      result.success = @handler.resta_escalar(args.operando1, args.operando2)
      write_result(result, oprot, 'resta_escalar', seqid)
    end

    def process_producto_escalar(seqid, iprot, oprot)
      args = read_args(iprot, Producto_escalar_args)
      result = Producto_escalar_result.new()
      result.success = @handler.producto_escalar(args.operando1, args.operando2)
      write_result(result, oprot, 'producto_escalar', seqid)
    end

    def process_division_escalar(seqid, iprot, oprot)
      args = read_args(iprot, Division_escalar_args)
      result = Division_escalar_result.new()
      result.success = @handler.division_escalar(args.operando1, args.operando2)
      write_result(result, oprot, 'division_escalar', seqid)
    end

    def process_suma_vectorial(seqid, iprot, oprot)
      args = read_args(iprot, Suma_vectorial_args)
      result = Suma_vectorial_result.new()
      result.success = @handler.suma_vectorial(args.operando1, args.operando2)
      write_result(result, oprot, 'suma_vectorial', seqid)
    end

    def process_resta_vectorial(seqid, iprot, oprot)
      args = read_args(iprot, Resta_vectorial_args)
      result = Resta_vectorial_result.new()
      result.success = @handler.resta_vectorial(args.operando1, args.operando2)
      write_result(result, oprot, 'resta_vectorial', seqid)
    end

    def process_producto_vectorial(seqid, iprot, oprot)
      args = read_args(iprot, Producto_vectorial_args)
      result = Producto_vectorial_result.new()
      result.success = @handler.producto_vectorial(args.operando1, args.operando2)
      write_result(result, oprot, 'producto_vectorial', seqid)
    end

    def process_suma_matricial(seqid, iprot, oprot)
      args = read_args(iprot, Suma_matricial_args)
      result = Suma_matricial_result.new()
      result.success = @handler.suma_matricial(args.operando1, args.operando2)
      write_result(result, oprot, 'suma_matricial', seqid)
    end

    def process_resta_matricial(seqid, iprot, oprot)
      args = read_args(iprot, Resta_matricial_args)
      result = Resta_matricial_result.new()
      result.success = @handler.resta_matricial(args.operando1, args.operando2)
      write_result(result, oprot, 'resta_matricial', seqid)
    end

    def process_producto_matricial(seqid, iprot, oprot)
      args = read_args(iprot, Producto_matricial_args)
      result = Producto_matricial_result.new()
      result.success = @handler.producto_matricial(args.operando1, args.operando2)
      write_result(result, oprot, 'producto_matricial', seqid)
    end

  end

  # HELPER FUNCTIONS AND STRUCTURES

  class Ping_args
    include ::Thrift::Struct, ::Thrift::Struct_Union

    FIELDS = {

    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class Ping_result
    include ::Thrift::Struct, ::Thrift::Struct_Union

    FIELDS = {

    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class Suma_escalar_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    OPERANDO1 = 1
    OPERANDO2 = 2

    FIELDS = {
      OPERANDO1 => {:type => ::Thrift::Types::I32, :name => 'operando1'},
      OPERANDO2 => {:type => ::Thrift::Types::I32, :name => 'operando2'}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class Suma_escalar_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::I32, :name => 'success'}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class Resta_escalar_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    OPERANDO1 = 1
    OPERANDO2 = 2

    FIELDS = {
      OPERANDO1 => {:type => ::Thrift::Types::I32, :name => 'operando1'},
      OPERANDO2 => {:type => ::Thrift::Types::I32, :name => 'operando2'}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class Resta_escalar_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::I32, :name => 'success'}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class Producto_escalar_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    OPERANDO1 = 1
    OPERANDO2 = 2

    FIELDS = {
      OPERANDO1 => {:type => ::Thrift::Types::I32, :name => 'operando1'},
      OPERANDO2 => {:type => ::Thrift::Types::I32, :name => 'operando2'}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class Producto_escalar_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::I32, :name => 'success'}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class Division_escalar_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    OPERANDO1 = 1
    OPERANDO2 = 2

    FIELDS = {
      OPERANDO1 => {:type => ::Thrift::Types::I32, :name => 'operando1'},
      OPERANDO2 => {:type => ::Thrift::Types::I32, :name => 'operando2'}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class Division_escalar_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::I32, :name => 'success'}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class Suma_vectorial_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    OPERANDO1 = 1
    OPERANDO2 = 2

    FIELDS = {
      OPERANDO1 => {:type => ::Thrift::Types::LIST, :name => 'operando1', :element => {:type => ::Thrift::Types::I32}},
      OPERANDO2 => {:type => ::Thrift::Types::LIST, :name => 'operando2', :element => {:type => ::Thrift::Types::I32}}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class Suma_vectorial_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::LIST, :name => 'success', :element => {:type => ::Thrift::Types::I32}}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class Resta_vectorial_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    OPERANDO1 = 1
    OPERANDO2 = 2

    FIELDS = {
      OPERANDO1 => {:type => ::Thrift::Types::LIST, :name => 'operando1', :element => {:type => ::Thrift::Types::I32}},
      OPERANDO2 => {:type => ::Thrift::Types::LIST, :name => 'operando2', :element => {:type => ::Thrift::Types::I32}}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class Resta_vectorial_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::LIST, :name => 'success', :element => {:type => ::Thrift::Types::I32}}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class Producto_vectorial_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    OPERANDO1 = 1
    OPERANDO2 = 2

    FIELDS = {
      OPERANDO1 => {:type => ::Thrift::Types::LIST, :name => 'operando1', :element => {:type => ::Thrift::Types::I32}},
      OPERANDO2 => {:type => ::Thrift::Types::LIST, :name => 'operando2', :element => {:type => ::Thrift::Types::I32}}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class Producto_vectorial_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::LIST, :name => 'success', :element => {:type => ::Thrift::Types::I32}}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class Suma_matricial_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    OPERANDO1 = 1
    OPERANDO2 = 2

    FIELDS = {
      OPERANDO1 => {:type => ::Thrift::Types::LIST, :name => 'operando1', :element => {:type => ::Thrift::Types::LIST, :element => {:type => ::Thrift::Types::I32}}},
      OPERANDO2 => {:type => ::Thrift::Types::LIST, :name => 'operando2', :element => {:type => ::Thrift::Types::LIST, :element => {:type => ::Thrift::Types::I32}}}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class Suma_matricial_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::LIST, :name => 'success', :element => {:type => ::Thrift::Types::LIST, :element => {:type => ::Thrift::Types::I32}}}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class Resta_matricial_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    OPERANDO1 = 1
    OPERANDO2 = 2

    FIELDS = {
      OPERANDO1 => {:type => ::Thrift::Types::LIST, :name => 'operando1', :element => {:type => ::Thrift::Types::LIST, :element => {:type => ::Thrift::Types::I32}}},
      OPERANDO2 => {:type => ::Thrift::Types::LIST, :name => 'operando2', :element => {:type => ::Thrift::Types::LIST, :element => {:type => ::Thrift::Types::I32}}}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class Resta_matricial_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::LIST, :name => 'success', :element => {:type => ::Thrift::Types::LIST, :element => {:type => ::Thrift::Types::I32}}}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class Producto_matricial_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    OPERANDO1 = 1
    OPERANDO2 = 2

    FIELDS = {
      OPERANDO1 => {:type => ::Thrift::Types::LIST, :name => 'operando1', :element => {:type => ::Thrift::Types::LIST, :element => {:type => ::Thrift::Types::I32}}},
      OPERANDO2 => {:type => ::Thrift::Types::LIST, :name => 'operando2', :element => {:type => ::Thrift::Types::LIST, :element => {:type => ::Thrift::Types::I32}}}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class Producto_matricial_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::LIST, :name => 'success', :element => {:type => ::Thrift::Types::LIST, :element => {:type => ::Thrift::Types::I32}}}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

end

