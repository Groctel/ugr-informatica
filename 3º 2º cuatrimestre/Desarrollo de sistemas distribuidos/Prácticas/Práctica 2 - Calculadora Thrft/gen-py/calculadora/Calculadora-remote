#!/usr/bin/env python
#
# Autogenerated by Thrift Compiler (0.14.1)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py
#

import sys
import pprint
if sys.version_info[0] > 2:
    from urllib.parse import urlparse
else:
    from urlparse import urlparse
from thrift.transport import TTransport, TSocket, TSSLSocket, THttpClient
from thrift.protocol.TBinaryProtocol import TBinaryProtocol

from calculadora import Calculadora
from calculadora.ttypes import *

if len(sys.argv) <= 1 or sys.argv[1] == '--help':
    print('')
    print('Usage: ' + sys.argv[0] + ' [-h host[:port]] [-u url] [-f[ramed]] [-s[sl]] [-novalidate] [-ca_certs certs] [-keyfile keyfile] [-certfile certfile] function [arg1 [arg2...]]')
    print('')
    print('Functions:')
    print('  void Ping()')
    print('  i32 SumaEscalar(i32 operando1, i32 operando2)')
    print('  i32 RestaEscalar(i32 operando1, i32 operando2)')
    print('  i32 ProductoEscalar(i32 operando1, i32 operando2)')
    print('  i32 DivisionEscalar(i32 operando1, i32 operando2)')
    print('   SumaVectorial( operando1,  operando2)')
    print('   RestaVectorial( operando1,  operando2)')
    print('   ProductoVectorial( operando1,  operando2)')
    print('   SumaMatricial( operando1,  operando2)')
    print('   RestaMatricial( operando1,  operando2)')
    print('   ProductoMatricial( operando1,  operando2)')
    print('')
    sys.exit(0)

pp = pprint.PrettyPrinter(indent=2)
host = 'localhost'
port = 9090
uri = ''
framed = False
ssl = False
validate = True
ca_certs = None
keyfile = None
certfile = None
http = False
argi = 1

if sys.argv[argi] == '-h':
    parts = sys.argv[argi + 1].split(':')
    host = parts[0]
    if len(parts) > 1:
        port = int(parts[1])
    argi += 2

if sys.argv[argi] == '-u':
    url = urlparse(sys.argv[argi + 1])
    parts = url[1].split(':')
    host = parts[0]
    if len(parts) > 1:
        port = int(parts[1])
    else:
        port = 80
    uri = url[2]
    if url[4]:
        uri += '?%s' % url[4]
    http = True
    argi += 2

if sys.argv[argi] == '-f' or sys.argv[argi] == '-framed':
    framed = True
    argi += 1

if sys.argv[argi] == '-s' or sys.argv[argi] == '-ssl':
    ssl = True
    argi += 1

if sys.argv[argi] == '-novalidate':
    validate = False
    argi += 1

if sys.argv[argi] == '-ca_certs':
    ca_certs = sys.argv[argi+1]
    argi += 2

if sys.argv[argi] == '-keyfile':
    keyfile = sys.argv[argi+1]
    argi += 2

if sys.argv[argi] == '-certfile':
    certfile = sys.argv[argi+1]
    argi += 2

cmd = sys.argv[argi]
args = sys.argv[argi + 1:]

if http:
    transport = THttpClient.THttpClient(host, port, uri)
else:
    if ssl:
        socket = TSSLSocket.TSSLSocket(host, port, validate=validate, ca_certs=ca_certs, keyfile=keyfile, certfile=certfile)
    else:
        socket = TSocket.TSocket(host, port)
    if framed:
        transport = TTransport.TFramedTransport(socket)
    else:
        transport = TTransport.TBufferedTransport(socket)
protocol = TBinaryProtocol(transport)
client = Calculadora.Client(protocol)
transport.open()

if cmd == 'Ping':
    if len(args) != 0:
        print('Ping requires 0 args')
        sys.exit(1)
    pp.pprint(client.Ping())

elif cmd == 'SumaEscalar':
    if len(args) != 2:
        print('SumaEscalar requires 2 args')
        sys.exit(1)
    pp.pprint(client.SumaEscalar(eval(args[0]), eval(args[1]),))

elif cmd == 'RestaEscalar':
    if len(args) != 2:
        print('RestaEscalar requires 2 args')
        sys.exit(1)
    pp.pprint(client.RestaEscalar(eval(args[0]), eval(args[1]),))

elif cmd == 'ProductoEscalar':
    if len(args) != 2:
        print('ProductoEscalar requires 2 args')
        sys.exit(1)
    pp.pprint(client.ProductoEscalar(eval(args[0]), eval(args[1]),))

elif cmd == 'DivisionEscalar':
    if len(args) != 2:
        print('DivisionEscalar requires 2 args')
        sys.exit(1)
    pp.pprint(client.DivisionEscalar(eval(args[0]), eval(args[1]),))

elif cmd == 'SumaVectorial':
    if len(args) != 2:
        print('SumaVectorial requires 2 args')
        sys.exit(1)
    pp.pprint(client.SumaVectorial(eval(args[0]), eval(args[1]),))

elif cmd == 'RestaVectorial':
    if len(args) != 2:
        print('RestaVectorial requires 2 args')
        sys.exit(1)
    pp.pprint(client.RestaVectorial(eval(args[0]), eval(args[1]),))

elif cmd == 'ProductoVectorial':
    if len(args) != 2:
        print('ProductoVectorial requires 2 args')
        sys.exit(1)
    pp.pprint(client.ProductoVectorial(eval(args[0]), eval(args[1]),))

elif cmd == 'SumaMatricial':
    if len(args) != 2:
        print('SumaMatricial requires 2 args')
        sys.exit(1)
    pp.pprint(client.SumaMatricial(eval(args[0]), eval(args[1]),))

elif cmd == 'RestaMatricial':
    if len(args) != 2:
        print('RestaMatricial requires 2 args')
        sys.exit(1)
    pp.pprint(client.RestaMatricial(eval(args[0]), eval(args[1]),))

elif cmd == 'ProductoMatricial':
    if len(args) != 2:
        print('ProductoMatricial requires 2 args')
        sys.exit(1)
    pp.pprint(client.ProductoMatricial(eval(args[0]), eval(args[1]),))

else:
    print('Unrecognized method %s' % cmd)
    sys.exit(1)

transport.close()
